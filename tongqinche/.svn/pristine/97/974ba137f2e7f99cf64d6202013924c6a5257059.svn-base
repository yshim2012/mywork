using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using DataMapper;
using Common;
using System.Collections;
using System.Data;

namespace tongqinche.Controllers
{
    public class ReportApiController : ApiController
    {
        /// <summary>
        /// 每月乘车汇总
        /// </summary>
        /// <param name="parm"></param>
        /// <returns></returns>
        [HttpPost]
        public string SelectMonthlyRideReport(dynamic parm)
        {
            SqlParamSet pa = new SqlParamSet();
            if (parm != null)
            {
                if (parm["rideBeginDate"] != null)
                {
                    pa.AddParam("rideBeginDate", parm["rideBeginDate"].ToString());
                }
                if (parm["ridEndDate"] != null)
                {
                    pa.AddParam("ridEndDate", DateTime.Parse(parm["ridEndDate"].ToString()).AddDays(1));
                }
                if (parm["rideType"] != null)
                {
                    pa.AddParam("rideType", parm["rideType"].ToString().Trim());
                }
                if (parm["cardType"] != null)
                {
                    pa.AddParam("cardType", parm["cardType"].ToString().Trim());
                }
                if (parm["company"] != null)
                {
                    pa.AddParam("company", parm["company"].ToString().Trim());
                }
                if (parm["carrierName"] != null)
                {
                    pa.AddParam("carrierName", parm["carrierName"].ToString().Trim());
                }

            }
            var dtMonthlyRideReport = RideData.QueryDataTable("SelectMonthlyRideReport", pa.GetParams());
            string jsonStr = JsonSerializationHandler.Serialize<DataTable>(dtMonthlyRideReport);
            return jsonStr;
        }


        [HttpPost]
        public string SelectDailyRideReport(dynamic parm)
        {
            IDictionary paramHashtable1 = new Hashtable();
            if (parm != null)
            {
                if (parm["ui_date_picker_range_from"] != null)
                {
                    paramHashtable1.Add("ui_date_picker_range_from", parm["ui_date_picker_range_from"].ToString().Trim());
                }
                if (parm["ui_date_picker_range_to"] != null)
                {
                    paramHashtable1.Add("ui_date_picker_range_to", DateTime.Parse(parm["ui_date_picker_range_to"].ToString()).AddDays(1));
                }
                if (parm["RideType"] != null)
                {
                    paramHashtable1.Add("COMMUNTE_TYPE", parm["RideType"].ToString().Trim());
                }
                if (parm["CardType"] != null)
                {
                    paramHashtable1.Add("CARD_TYPE", parm["CardType"].ToString().Trim());
                }
                if (parm["Company"] != null)
                {
                    paramHashtable1.Add("CO", parm["Company"].ToString().Trim());
                }
                if (parm["CarrierName"] != null)
                {
                    paramHashtable1.Add("CARRIER_NAME", parm["CarrierName"].ToString().Trim());
                }

            }

            var dtDailyRideReport = RideData.QueryDataTable("SelectDailyRideReport", paramHashtable1);
            var jsonStr = JsonSerializationHandler.Serialize<DataTable>(dtDailyRideReport);
            return jsonStr;
        }

        /// <summary>
        /// 乘车计费月度统计
        /// </summary>
        /// <param name="parm"></param>
        /// <returns></returns>
        [HttpPost]
        public string SelectMonthRideSummaryReport(dynamic parm)
        {
            SqlParamSet pa = new SqlParamSet();
            if (parm != null)
            {
                if (parm["rideBeginDate"] != null)
                {
                    pa.AddParam("rideBeginDate", parm["rideBeginDate"].ToString());
                }
                if (parm["ridEndDate"] != null)
                {
                    pa.AddParam("ridEndDate", DateTime.Parse(parm["ridEndDate"].ToString()).AddDays(1));
                }
                if (parm["cardType"] != null)
                {
                    pa.AddParam("cardType", parm["cardType"].ToString().Trim());
                }
                if (parm["company"] != null)
                {
                    pa.AddParam("company", parm["company"].ToString().Trim());
                }
                if (parm["locType"] != null)
                {
                    pa.AddParam("locType", parm["locType"].ToString().Trim());
                }
            }
            var dtMonthlyRideReport = RideData.QueryDataTable("SelectMonthRideSummaryReport", pa.GetParams());
            string jsonStr = JsonSerializationHandler.Serialize<DataTable>(dtMonthlyRideReport);
            return jsonStr;
        }
    }
}
